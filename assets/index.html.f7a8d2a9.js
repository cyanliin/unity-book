import{_ as t}from"./game.01b8b682.js";import{_ as p,r as c,o as i,c as o,a as s,b as n,d as l,w as u,e as a}from"./app.74848dc1.js";const d={},r=a('<h1 id="控制球體" tabindex="-1"><a class="header-anchor" href="#控制球體" aria-hidden="true">#</a> 控制球體</h1><p>這裡我們要開始寫程式了！在之前我們所使用的各種元件(Component)都可以想像是 Unity 官方預先寫好的腳本元件，現在我們可以透過自己新增自訂的腳本，來實作客製化的功能。</p><h2 id="新增-script-元件-腳本" tabindex="-1"><a class="header-anchor" href="#新增-script-元件-腳本" aria-hidden="true">#</a> 新增 Script 元件(腳本)</h2><h3 id="方法一-從物件新增" tabindex="-1"><a class="header-anchor" href="#方法一-從物件新增" aria-hidden="true">#</a> 方法一：從物件新增</h3><p>如同添加 RigidBody 的方式，選取物件後，在 Inspect 面板中點選 Add Component，並選擇最後一項 New script。輸入即將新增的檔名 Ball，按下 Create and Add，Unity 就會幫你在 Assets 資料夾中新增 Ball.cs 檔，並且賦予到當前物件裡。</p><h3 id="方法二-先新增腳本檔-再拖曳至物件" tabindex="-1"><a class="header-anchor" href="#方法二-先新增腳本檔-再拖曳至物件" aria-hidden="true">#</a> 方法二：先新增腳本檔，再拖曳至物件</h3><p>你也可以在 Assets 面板中，按右鍵 Create / C# Script 命名為 Ball.cs，並選取 Ball 物件、拖曳腳本進 Inspect 面板之中。</p><h3 id="編輯腳本程式碼" tabindex="-1"><a class="header-anchor" href="#編輯腳本程式碼" aria-hidden="true">#</a> 編輯腳本程式碼</h3><p>只需要連點程式檔案兩下，Unity 便會自動開啟預設的程式編輯軟體。</p>',9),k={class:"custom-container tip"},m=s("p",{class:"custom-container-title"},"程式編輯軟體",-1),v=a(`<h2 id="ball-cs" tabindex="-1"><a class="header-anchor" href="#ball-cs" aria-hidden="true">#</a> Ball.cs</h2><p>請將 Ball.cs 開啟，你會看到 Unity 已經幫你自動產生了一些內容。Start(), Update() 的裡面就是將來放置放程式的地方。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// 這邊宣告屬性（變數）</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 這裡的程式只會在開始時執行一次</span>
        <span class="token comment">// （通常是做些初始化的設定）</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 這裡的程式會每秒執行 30 次</span>
        <span class="token comment">// （主要的遊戲邏輯大多擺這邊）</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">MonoBehaviour 類別</p><p>請特別注意 Ball 類別是繼承自 MonoBehaviour 類別：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MonoBehaviour 是 UnityEngine 裡最重要的類別，所有 Unity 腳本(Script) ，提供大量常用的方法。</p><p>常用的 Start(), Update(), GetComponent&lt;&gt;() 都是源自於 MonoBehavior。</p></div><p>請將 Ball.cs 改寫為下列內容：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> speed <span class="token operator">=</span> <span class="token number">500.0f</span><span class="token punctuation">;</span> <span class="token comment">// 速度</span>
    <span class="token keyword">private</span> <span class="token class-name">Rigidbody</span> rb<span class="token punctuation">;</span> <span class="token comment">// 用來存放剛體元件的變數</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 取得自身的剛體元件</span>
        rb <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 取得方向鍵輸入</span>
        <span class="token class-name"><span class="token keyword">float</span></span> v <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">&quot;Vertical&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">float</span></span> h <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">&quot;Horizontal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 合成為方向向量、推動剛體</span>
        <span class="token class-name">Vector3</span> push <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">*</span> speed<span class="token punctuation">;</span>
        rb<span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span>push <span class="token operator">*</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="執行遊戲" tabindex="-1"><a class="header-anchor" href="#執行遊戲" aria-hidden="true">#</a> 執行遊戲</h2><p>存檔後回到 Unity，並按下執行，此時就可以使用方向鍵來控制球體了！</p><p><img src="`+t+'" alt="game"></p><div class="custom-container tip"><p class="custom-container-title">為何剛體元件要在 Start 裡取得？</p><p>如果把取得剛體元件放在 Update 裡面，則每 1/30 秒都會取得一次 (Unity 預設一秒會執行30次 Update) ，雖然執起來不會有問題，但這樣十分浪費運算資源。因此，把取得剛體元件的程式放在 Start 裡更合適，因為它只會在遊戲啟動時執行一次，Update 就可以直接使用。</p></div><div class="custom-container tip"><p class="custom-container-title">一個物件上，可以有多個 Script 嗎？</p><p>可以的，Unity 的物件身上可以擁有多個 Script 元件。與其把所有功能都寫在一個龐大的 Script 裡，不如依功能拆分成獨立的 Script，讓後續更方便共用與維護。</p></div>',11);function b(h,y){const e=c("RouterLink");return i(),o("div",null,[r,s("div",k,[m,s("p",null,[n("請參考 "),l(e,{to:"/basics/code-editor/"},{default:u(()=>[n("程式編輯軟體設定")]),_:1}),n("，獲得更多說明。")])]),v])}const w=p(d,[["render",b],["__file","index.html.vue"]]);export{w as default};
