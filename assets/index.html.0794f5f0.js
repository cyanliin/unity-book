import{_ as n,o as s,c as a,e}from"./app.74848dc1.js";const t="/unity-book/assets/rename.1e4c821e.jpg",p="/unity-book/assets/GoaledMat.81f193ef.png",c="/unity-book/assets/apply-mat.14ed4669.png",o="/unity-book/assets/goaled.7a2f2d26.gif",l="/unity-book/assets/goaled2.9a0dbf70.gif",i={},u=e('<h1 id="碰撞偵測" tabindex="-1"><a class="header-anchor" href="#碰撞偵測" aria-hidden="true">#</a> 碰撞偵測</h1><p>現在我們讓方塊碰到旗竿時，將旗竿改變為綠色。</p><h2 id="步驟-1-將方塊改名" tabindex="-1"><a class="header-anchor" href="#步驟-1-將方塊改名" aria-hidden="true">#</a> 步驟 1. 將方塊改名</h2><p>因為碰撞時，我們打算用物件名稱來判斷碰到的對象，所以這邊先將方塊的名稱改為 PlayBox</p><p><img src="'+t+'" alt="rename"></p><h2 id="步驟-2-建立過關材質檔" tabindex="-1"><a class="header-anchor" href="#步驟-2-建立過關材質檔" aria-hidden="true">#</a> 步驟 2. 建立過關材質檔</h2><p>在 Assets 面板中按右鍵，Create / Material 建立名為 Goaled 的材質檔，並修改為綠色。</p><p><img src="'+p+`" alt="GoaledMat"></p><h2 id="步驟-3-建立旗竿程式碼" tabindex="-1"><a class="header-anchor" href="#步驟-3-建立旗竿程式碼" aria-hidden="true">#</a> 步驟 3. 建立旗竿程式碼</h2><p>選取旗竿後，增加名為 Goal.cs 的程式碼元件，修改內容如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goal</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Material</span> goaledMat<span class="token punctuation">;</span> <span class="token comment">// 過關材質</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// 當碰撞發生時，會執行的函數</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> other<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 如果碰撞的物件名為 PlayBox</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;PlayBox&quot;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token comment">// 更換為過關材質</span>
            <span class="token class-name">MeshRenderer</span> mr <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            mr<span class="token punctuation">.</span>material <span class="token operator">=</span> goaledMat<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="步驟-4-賦予過關材質" tabindex="-1"><a class="header-anchor" href="#步驟-4-賦予過關材質" aria-hidden="true">#</a> 步驟 4. 賦予過關材質</h2><p>程式碼存檔後，回到 Unity 會看見旗竿的程式碼元件中，多了一個 Goaled Mat 的欄位。這時將 Assets 面板裡的過關材質拖曳進該欄位，之後程式碼就可以使用該材質了。</p><div class="custom-container tip"><p class="custom-container-title">Public 欄位</p><p>Unity 會自動把宣告為 Public 的屬性，以輸入元件的方式呈現在 Inspector 面板，方便開發人員直接修改參數。因此，通常需要在開發時反覆調整的參數，建議都宣告為 Public。</p></div><p><img src="`+c+'" alt="apply-mat"></p><h2 id="步驟-5-執行看看" tabindex="-1"><a class="header-anchor" href="#步驟-5-執行看看" aria-hidden="true">#</a> 步驟 5. 執行看看</h2><p>按下執行，讓方框碰撞到旗竿試試看，旗竿應該會更換顏色。</p><p><img src="'+o+`" alt="goaled"></p><h2 id="再完美一點" tabindex="-1"><a class="header-anchor" href="#再完美一點" aria-hidden="true">#</a> 再完美一點</h2><p>上面我們已經完成了碰撞偵測、動態更換材質。但如果碰撞時，旗幟與方塊也同時變成綠色就更完美了。</p><p>我們先在旗竿的 Goal 類別中，新增旗幟與方塊的屬性。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goal</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Material</span> goaledMat<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> box<span class="token punctuation">;</span> <span class="token comment">// 方塊</span>
    <span class="token keyword">public</span> <span class="token class-name">GameObject</span> flag<span class="token punctuation">;</span> <span class="token comment">// 旗幟</span>

    <span class="token comment">// ...略...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到 Unity 會看見旗竿的 inspector 視窗中出現了 box、flag 欄位。</p><p>此時我們從 Hierarchy 視窗，將方塊和旗幟物件拖曳進去，此時我們就完成了指定 box、flag 兩屬性的指定對象。</p><p>接著我們再修改一下 OnCollisionEnter 函數：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// 當碰撞發生時，會執行的函數</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnCollisionEnter</span><span class="token punctuation">(</span><span class="token class-name">Collision</span> other<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 如果碰撞的物件名為 PlayBox</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;PlayBox&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 更換為過關材質</span>
        <span class="token class-name">MeshRenderer</span> mr <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mr<span class="token punctuation">.</span>material <span class="token operator">=</span> goaledMat<span class="token punctuation">;</span>

        <span class="token comment">// 將旗幟更換為過關材質</span>
        flag<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material <span class="token operator">=</span> goaledMat<span class="token punctuation">;</span>

        <span class="token comment">// 將方塊更換為過關材質</span>
        box<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material <span class="token operator">=</span> goaledMat<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt="goad2"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MeshRenderer</span> mr <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mr<span class="token punctuation">.</span>material <span class="token operator">=</span> goaledMat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>等同於</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MeshRenderer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>material <span class="token operator">=</span> goaledMat<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前者有將 MeshRenderer 提出來存到變數再利用，這樣好處是 mr 可以重複利用，看起來也比較直觀；</p><p>後者則是取得 MeshRenderer 之後就直接使用，可以寫成單行。</p></div>`,28),r=[u];function d(k,m){return s(),a("div",null,r)}const b=n(i,[["render",d],["__file","index.html.vue"]]);export{b as default};
