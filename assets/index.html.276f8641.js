import{_ as t,r as o,o as c,c as p,a as n,b as s,d as e,e as i}from"./app.74848dc1.js";const l={},r=n("h1",{id:"旋轉物件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#旋轉物件","aria-hidden":"true"},"#"),s(" 旋轉物件")],-1),u=n("p",null,"在 Unity 中的 rotation（旋轉）並不同於 position 使用 Vector3 個別設定三軸向數值，而是使用 Quaternion（四元數）來定義旋轉角度。",-1),d={id:"euler-angles-尤拉角",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#euler-angles-尤拉角","aria-hidden":"true"},"#",-1),m={href:"https://zh.wikipedia.org/zh-tw/%E6%AC%A7%E6%8B%89%E8%A7%92",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.youtube.com/watch?v=zc8b2Jo7mno",target:"_blank",rel:"noopener noreferrer"},v={id:"quaternion-四元數-unity使用",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#quaternion-四元數-unity使用","aria-hidden":"true"},"#",-1),_={href:"https://zh.wikipedia.org/zh-tw/%E5%9B%9B%E5%85%83%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E6%97%8B%E8%BD%AC",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.youtube.com/watch?v=zc8b2Jo7mno",target:"_blank",rel:"noopener noreferrer"},g=i(`<p>但為了要讓一般人方便使用，Unity 也提供了許多方便的 Euler 和 Quaternion 互轉轉換的方法。</p><h2 id="常用旋轉方法" tabindex="-1"><a class="header-anchor" href="#常用旋轉方法" aria-hidden="true">#</a> 常用旋轉方法</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>
<span class="token comment">// 設定為 Y 軸固定轉向 45 度</span>
transform<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Quaternion<span class="token punctuation">.</span><span class="token function">Euler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">45f</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 取得三軸角度（Vector3)</span>
<span class="token class-name">Vector3</span> r <span class="token operator">=</span> transform<span class="token punctuation">.</span>rotation<span class="token punctuation">.</span>eulerAngles<span class="token punctuation">;</span>

<span class="token comment">// 將 Y 軸&quot;再&quot;旋轉 45 度</span>
transform<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">45f</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 自動轉向某目標物件（以＋Ｚ當作前方）</span>
transform<span class="token punctuation">.</span><span class="token function">LookAt</span><span class="token punctuation">(</span><span class="token operator">&lt;&lt;</span>目標物件<span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="範例-持續旋轉" tabindex="-1"><a class="header-anchor" href="#範例-持續旋轉" aria-hidden="true">#</a> 範例：持續旋轉</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Spin</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        transform<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.2f</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function E(x,w){const a=o("ExternalLinkIcon");return c(),p("div",null,[r,u,n("h3",d,[k,s(),n("a",m,[s("Euler Angles（尤拉角）"),e(a)])]),n("p",null,[s("是以 x, y, z 三個軸向個別旋轉，組成一個空間中的旋轉方向。此較容易理解，但有個致命的 "),n("a",h,[s("Gimbal Lock"),e(a)]),s(" 問題。")]),n("h3",v,[b,s(),n("a",_,[s("Quaternion（四元數）- Unity使用"),e(a)])]),n("p",null,[s("是較為複雜的數學算法，但運算上較為快速簡潔，且不會遇到 "),n("a",f,[s("Gimbal Lock"),e(a)]),s(" 的問題，所以大部分的 3D 遊戲引擎都是用它來表示空間中的旋轉量。")]),g])}const B=t(l,[["render",E],["__file","index.html.vue"]]);export{B as default};
